#!/opt/anaconda/bin/python3

import argparse
from  spectrojotometer.magnetic_model import MagneticModel, magnetic_model_from_file

def confindex(c):
    return sum([i*2**n for n,i in enumerate(c)])

    
def read_configurations_file(filename,model):
    configuration_list = {}
    with open(filename,"r") as f:
        for l in f:
            ls = l.strip()
            if ls == "" or ls[0]=="#":
                continue
            newconf = []
            for c in l:
                if c == "#":
                    break
                elif c == "0":
                    newconf.append(0)
                elif c == "1":
                    newconf.append(1)
            while len(newconf)<model.cell_size:
                newconf.append(0)
            configuration_list[str(confindex(newconf))] = newconf
    configuration_list  = [configuration_list[k] for k in configuration_list]
    return configuration_list


def main():
    parser = argparse.ArgumentParser(description='Generate spin configurations to determine the coupling constants of a model with minimal condition number')
    
    parser.add_argument('modelfile', metavar='modelfile', type=str, 
                       help='load atomic positions from a cif file')

    parser.add_argument('--known', metavar='[known configuration file]', type=str, 
                       help='file with the set of configurations that we want to increase ')

    parser.add_argument('--start', metavar='[start file]', type=str, 
                       help='A file containing an initial guess for the target configurations.')

    parser.add_argument('-n', metavar='numconfs', type=int,
                        default=1,
                       help='number of new configurations to be generated')
    parser.add_argument('-u', metavar='updatesize', type=int,
                        default=10,
                       help='number of random configurations to be generate on each step')
    parser.add_argument('--it', metavar='iterations', type=int,
                        default=100,
                       help='number of iterations')
    parser.add_argument('out', metavar='outfile', type=str,
                        default=None,
                        help='Name of the outputfile. If it is not provided, the output is printed to the standard output.')


    args = vars(parser.parse_args())
    
    if args["modelfile"] is None:
        print("A model file is required. You should provide it by means of the parameter --modelfile")
        return -1
    model = magnetic_model_from_file(args["modelfile"])
    if model.bond_lists is None or len(model.bond_lists) == 0:
        print("The model does not have defined bounds\n")
        print("Use ... to define a non-trivial model\n")
        return -1

    if args["known"] is not None:
        knownconfs = read_configurations_file(args["known"],model)
    else:
        knownconfs = None

    
    if args["start"] is not None:
        startconfs = read_configurations_file(args["start"],model)
    else:
        startconfs = None
        
    cn,newconfs=model.find_optimal_configurations(num_new_confs=args["n"],
                                                  start=startconfs,
                                                  known=knownconfs,
                                                  its=args["it"], update_size=max(args["n"],args["u"]))

    
    if knownconfs is not None:
        knownconfs = sorted(zip([confindex(c) for c in knownconfs ],knownconfs), key=lambda x:x[0])
    else:
        knownconfs = []

    namedconfs = sorted(zip([confindex(c) for c in newconfs ],newconfs), key=lambda x:x[0])

    with open(args["modelfile"][:-4]+"-resume.tmp","w") as of:
        for nc in namedconfs:
            of.write(str(nc[1]) + "\t\t #" + str(nc[0])+"\n")
        

    

    
    if args["out"] is None:
        print("#  Condition number: " + str(cn) +"\n\n")
        print("# The optimal configurations found are\n")
        for nc in namedconfs:
            print(str(nc[1]) + "\t\t #" + str(nc[0]))
        
        if len(knownconfs)>0:
            print("\n# Together with the known configurations\n")
            for nc in knownconfs:
                print(str(nc[1]) + "\t\t #" + str(nc[0]))

    else:
        with open(args["out"],"w") as of:
            of.write("#  condition number: " + str(cn) +"\n\n")
            for nc in namedconfs:
                of.write(str(nc[1]) + "\t\t #" + str(nc[0])+"\n")
            if len(knownconfs)>0:
                of.write("\n# Together with the known configurations\n\n")
                for nc in knownconfs:
                    of.write(str(nc[1]) + "\t\t #" + str(nc[0])+"\n")

    return(0)



if __name__ == "__main__":
    main()

