#!/usr/bin/python3


import argparse
from spectrojotometer.magnetic_model import MagneticModel, magnetic_model_from_file


def confindex(c):
    return sum([i*2**n for n,i in enumerate(c)])

    
def read_configurations_file(filename,model):
    configuration_list = {}
    with open(filename,"r") as f:
        for l in f:
            ls = l.strip()
            if ls == "" or ls[0]=="#":
                continue
            newconf = []
            for c in l:
                if c == "#":
                    break
                elif c == "0":
                    newconf.append(0)
                elif c == "1":
                    newconf.append(1)
            while len(newconf)<model.cell_size:
                newconf.append(0)
            configuration_list[str(confindex(newconf))] = newconf
    configuration_list  = [configuration_list[k] for k in configuration_list]
    return configuration_list


def main():
    parser = argparse.ArgumentParser(description=\
"""
From an standard cif or wien2k struct file, produces a new cif file containing information about the bonds that defines a Heisenberg magnetic effective model.
If the input file has already information about bonds, the output file contains both the bonds in the input as well as the new generated bonds.
""")
    
    parser.add_argument('modelin', metavar='modelfile1', type=str, 
                       help='load atomic positions from a model file for the source model')

    parser.add_argument('modelout', metavar='modelfile2', type=str, 
                       help='load atomic positions from a model file for the target model')

    parser.add_argument('configin', metavar='conffile', type=str, 
                       help='configs in the src model')
    
    parser.add_argument('out', metavar='outfile', type=str,
                        default=None,
                        help='Name of the outputfile. If it is not provided, the output is printed to the standard output.')


    args = vars(parser.parse_args())
    
    if args["modelin"] is None:
        print("An input model file is required. You should provide it by means of the parameter --modelin")
        return -1
    if args["modelout"] is None:
        print("An output model file is required. You should provide it by means of the parameter --modelout")
        return -1
    if args["configin"] is None:
        print("A file with a list of configurations is required. You should provide it by means of the parameter --configin")
        return -1
    if args["out"] is None:
        print("An output file is required. You should provide it by means of the parameter --out")
        return -1

        

    modelin = magnetic_model_from_file(args["modelin"])
    modelout = magnetic_model_from_file(args["modelout"])
    confsin = read_configurations_file(args["configin"], modelin)    
    res = map_config_model1_model2(modelin,confsin,modelout,tol=.1)


    if args["out"] == "-":
        print("Configurations in model2")
        for c in res:
            print(c)
    else:
        with open(args["out"]) as fout:
            for c in res:
                fout.write(c)
    return(0)



if __name__ == "__main__":
    main()

